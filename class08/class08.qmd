---
title: "Class 8: Mini-Project"
author: Pagna Hout
date: 2023-04-28
format: pdf
---

#### Preparing the data

```{r}
fna.data <- "WisconsinCancer.csv"
wisc.df <- read.csv(fna.data, row.names=1)

# We can use -1 here to remove the first column
wisc.data <- wisc.df[,-1]

# Create diagnosis vector for later 
wisc.df$diagnosis
diagnosis <- wisc.df[,1]
```

#### Exploring data analysis

-   **Q1**. How many observations are in this dataset?

    This dataset has 569 observations.

-   **Q2**. How many of the observations have a malignant diagnosis?

    There are 212 observations with malignant diagnosis.

-   **Q3**. How many variables/features in the data are suffixed with `_mean`?

    There are 10 variables in the data with suffix "\_mean".

```{r}
#1
nrow(wisc.df)
#2
table(diagnosis)
#3
length(grep("_mean", colnames(wisc.df)))
```

#### Performing PCA

Check the mean and standard deviation of the features (i.e. columns) of the `wisc.data` to determine if the data should be scaled. Use the `colMeans()` and `apply()` functions like you\'ve done before.

```{r}
# Check column means and standard deviations
colMeans(wisc.data)
apply(wisc.data,2,sd)
```

Execute PCA with the `prcomp()` function on the `wisc.data`, scaling if appropriate, and assign the output model to `wisc.pr`.

```{r}
# Perform PCA on wisc.data by completing the following code
wisc.pr <- prcomp(wisc.data, scale = T)

summary(wisc.pr)
```

-   **Q4**. From your results, what proportion of the original variance is captured by the first principal components (PC1)?

    The proportion of the original variance is 0.44.

-   **Q5**. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

    28 PCs are required to describe at least 70% of the original variance in the data.

-   **Q6**. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

    24 PCs are required to describe at least 90% of the original variance in the data.

#### Interpreting PCA results

Create a biplot of the `wisc.pr` using the `biplot()` function.

```{r}
biplot(wisc.pr)
```

-   **Q7.** What stands out to you about this plot? Is it easy or difficult to understand? Why?

    The plot looks quite messy and it is difficult to understand because the row names and column names are displayed on the plot.

```{r}
# Scatter plot observations by components 1 and 2
plot( wisc.pr$x[,1:2] , col = as.factor(diagnosis) , 
     xlab = "PC1", ylab = "PC2")
```

**8.** Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

The plots generated dots instead of the row names.

```{r}
# Repeat for components 1 and 3
plot(wisc.pr$x[,1], wisc.pr$x[,3], col = as.factor(diagnosis), 
     xlab = "PC1", ylab = "PC3")
```

```{r}
# Create a data.frame for ggplot
df <- as.data.frame(wisc.pr$x)
df$diagnosis <- diagnosis

# Load the ggplot2 package
library(ggplot2)

# Make a scatter plot colored by diagnosis
ggplot(df) + 
  aes(PC1, PC2, col=as.factor(diagnosis)) + 
  geom_point()
```

#### Variance explained

```{r}
# Calculate variance of each component
pr.var <- wisc.pr$sdev^2
head(pr.var)
```

Calculate the variance explained by each principal component by dividing by the total variance explained of all principal components. Assign this to a variable called `pve` and create a plot of variance explained for each principal component.

```{r}
# Variance explained by each principal component: pve
pve <-  pr.var / sum(pr.var)

# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component", 
     ylab = "Proportion of Variance Explained", 
     ylim = c(0, 1), type = "o")
```

```{r}
# Alternative scree plot of the same data, note data driven y-axis
barplot(pve, ylab = "Precent of Variance Explained",
     names.arg=paste0("PC",1:length(pve)), las=2, axes = FALSE)
axis(2, at=pve, labels=round(pve,2)*100 )
```

#### Communicating PCA results

-   **Q9.** For the first principal component, what is the component of the loading vector (i.e. `wisc.pr$rotation[,1]`) for the feature `concave.points_mean`? This tells us how much this original feature contributes to the first PC.

```{r}
wisc.pr$rotation["concave.points_mean",1]
```

#### Hierarchical clustering

First scale the `wisc.data` data and assign the result to `data.scaled`.

```{r}
# Scale the wisc.data data using the "scale()" function
data.scaled <- scale(wisc.data)
```

Calculate the (Euclidean) distances between all pairs of observations in the new scaled dataset and assign the result to `data.dist`.

```{r}
data.dist <- dist (data.scaled)
```

```{r}
wisc.hclust <- hclust(data.dist, method ="complete" )
```

#### Results of hierarchical clustering

-   **Q10.** Using the `plot()` and `abline()` functions, what is the height at which the clustering model has 4 clusters?

    The clustering model has 4 clusters at h=19.

```{r}
plot(wisc.hclust)
abline(h=19, col="red", lty=2)
```

#### Selecting number of clusters

Use `cutree()` to cut the tree so that it has 4 clusters. Assign the output to the variable `wisc.hclust.clusters`.

```{r}
wisc.hclust.clusters <- cutree(wisc.hclust, h=19)
```

We can use the `table()` function to compare the cluster membership to the actual diagnoses.

```{r}
table(wisc.hclust.clusters, diagnosis)
```

#### Using different methods

-   **Q12.** Which method gives your favorite results for the same `data.dist` dataset? Explain your reasoning.

The "complete" method gave the same results as data.dist dataset because the clusters are clearer.

#### Combining methods

```{r}
wisc.pr.hclust <- hclust(data.dist, method ="ward.D2" )
grps <- cutree(wisc.pr.hclust, k=2)
table(grps)
```

```{r}
table(grps, diagnosis)
```

```{r}
plot(wisc.pr$x[,1:2], col=grps)
```

```{r}
plot(wisc.pr$x[,1:2], col=as.factor(diagnosis))
```

Use the distance along the first 7 PCs for clustering i.e. wisc.pr\$x\[, 1:7\]

-   **Q13**. How well does the newly created model with four clusters separate out the two diagnoses?

It identifies groups of similar objects in the dataset with different variable quantities.

```{r}
wisc.pr.hclust <- hclust(dist(wisc.pr$x[, 1:7]), method = "ward.D2")
wisc.pr.hclust
```

-   **Q14**. How well do the hierarchical clustering models you created in previous sections (i.e. before PCA) do in terms of separating the diagnoses? Again, use the `table()` function to compare the output of each model (`wisc.km$cluster` and `wisc.hclust.clusters`) with the vector containing the actual diagnoses.

```{r}
wisc.pr.hclust.clusters <- cutree(wisc.pr.hclust, k=2)

# Compare to actual diagnoses
table(wisc.hclust.clusters, diagnosis)

wisc.km<-kmeans(scale(wisc.data), centers = 2, nstart = 20)
table(wisc.km$cluster, diagnosis)

table(wisc.km$cluster,wisc.pr.hclust.clusters)
```

#### Prediction

```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```

```{r}
plot(wisc.pr$x[,1:2], col=as.factor(diagnosis))
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```

-   **Q16.** Which of these new patients should we prioritize for follow up based on your results?

Patient 2 should prioritize for follow up based on the results above.
