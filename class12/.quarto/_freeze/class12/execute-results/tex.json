{
  "hash": "b50ce8cb6813daa17d7df4faadc71762",
  "result": {
    "markdown": "---\ntitle: \"Class 12: Transcriptomics and the analysis of RNA-Seq data\"\nauthor: Pagna Hout\nformat: pdf\ndate: 05/12/2023\n---\n\n\n## 1. Bioconductor and DESeq2 setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(BiocManager)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nBioconductor version '3.16' is out-of-date; the current release version '3.17'\n  is available with R version '4.3'; see https://bioconductor.org/install\n```\n:::\n\n```{.r .cell-code}\nlibrary(DESeq2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: S4Vectors\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: stats4\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: BiocGenerics\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'BiocGenerics'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    IQR, mad, sd, var, xtabs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    anyDuplicated, aperm, append, as.data.frame, basename, cbind,\n    colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find,\n    get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply,\n    match, mget, order, paste, pmax, pmax.int, pmin, pmin.int,\n    Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort,\n    table, tapply, union, unique, unsplit, which.max, which.min\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'S4Vectors'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    expand.grid, I, unname\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: IRanges\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: GenomicRanges\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: GenomeInfoDb\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: SummarizedExperiment\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: MatrixGenerics\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: matrixStats\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'MatrixGenerics'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:matrixStats':\n\n    colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse,\n    colCounts, colCummaxs, colCummins, colCumprods, colCumsums,\n    colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs,\n    colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats,\n    colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds,\n    colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads,\n    colWeightedMeans, colWeightedMedians, colWeightedSds,\n    colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet,\n    rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods,\n    rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps,\n    rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins,\n    rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks,\n    rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars,\n    rowWeightedMads, rowWeightedMeans, rowWeightedMedians,\n    rowWeightedSds, rowWeightedVars\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: Biobase\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWelcome to Bioconductor\n\n    Vignettes contain introductory material; view with\n    'browseVignettes()'. To cite Bioconductor, see\n    'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'Biobase'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:MatrixGenerics':\n\n    rowMedians\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:matrixStats':\n\n    anyMissing, rowMedians\n```\n:::\n:::\n\n\n## 2. Import countData and colData\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncounts <- read.csv(\"airway_scaledcounts.csv\", row.names=1)\nmetadata <-  read.csv(\"airway_metadata.csv\")\n\nhead(counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516\nENSG00000000003        723        486        904        445       1170\nENSG00000000005          0          0          0          0          0\nENSG00000000419        467        523        616        371        582\nENSG00000000457        347        258        364        237        318\nENSG00000000460         96         81         73         66        118\nENSG00000000938          0          0          1          0          2\n                SRR1039517 SRR1039520 SRR1039521\nENSG00000000003       1097        806        604\nENSG00000000005          0          0          0\nENSG00000000419        781        417        509\nENSG00000000457        447        330        324\nENSG00000000460         94        102         74\nENSG00000000938          0          0          0\n```\n:::\n\n```{.r .cell-code}\nhead(metadata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          id     dex celltype     geo_id\n1 SRR1039508 control   N61311 GSM1275862\n2 SRR1039509 treated   N61311 GSM1275863\n3 SRR1039512 control  N052611 GSM1275866\n4 SRR1039513 treated  N052611 GSM1275867\n5 SRR1039516 control  N080611 GSM1275870\n6 SRR1039517 treated  N080611 GSM1275871\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nView(counts)\nView(metadata)\n```\n:::\n\n\n#### Q1: How many genes are in this dataset?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 38694\n```\n:::\n:::\n\n\nThere are 38694 genes in this dataset.\n\n#### Q2: How many \\'control\\' cell lines do we have?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(metadata$dex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\ncontrol treated \n      4       4 \n```\n:::\n:::\n\n\nThere are 4 \"control\" cell lines in the dataset.\n\n## 3. Toy differential gene expression\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontrol <- metadata[metadata[,\"dex\"]==\"control\",]\ncontrol.counts <- counts[ ,control$id]\ncontrol.mean <- rowSums( control.counts )/4 \nhead(control.mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nENSG00000000003 ENSG00000000005 ENSG00000000419 ENSG00000000457 ENSG00000000460 \n         900.75            0.00          520.50          339.75           97.25 \nENSG00000000938 \n           0.75 \n```\n:::\n:::\n\n\n#### Q3: How would you make the above code in either approach more robust?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontrol <- metadata[metadata[,\"dex\"]==\"control\",]\ncontrol.counts <- counts[ ,control$id]\ncontrol.mean <- rowMeans(control.counts)\nhead(control.mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nENSG00000000003 ENSG00000000005 ENSG00000000419 ENSG00000000457 ENSG00000000460 \n         900.75            0.00          520.50          339.75           97.25 \nENSG00000000938 \n           0.75 \n```\n:::\n:::\n\n\n#### Q4: Follow the same procedure for the `treated` samples (i.e.Â calculate the mean per gene across drug treated samples and assign to a labeled vector called `treated.mean`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreated <- metadata[metadata[,\"dex\"]==\"treated\",]\ntreated.counts <- counts[,treated$id]\ntreated.mean <- rowMeans(treated.counts)\nhead(treated.mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nENSG00000000003 ENSG00000000005 ENSG00000000419 ENSG00000000457 ENSG00000000460 \n         658.00            0.00          546.00          316.50           78.75 \nENSG00000000938 \n           0.00 \n```\n:::\n:::\n\n\nCombining meancount data for bookeeping purposes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeancounts <- data.frame(control.mean, treated.mean)\n\ncolSums(meancounts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncontrol.mean treated.mean \n    23005324     22196524 \n```\n:::\n:::\n\n\n#### Q5 (a): Create a scatter plot showing the mean of the treated samples against the mean of the control samples. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(meancounts, xlab=\"Control\", ylab=\"Treated\")\n```\n\n::: {.cell-output-display}\n![](class12_files/figure-pdf/unnamed-chunk-10-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n#### Q5 (b): You could also use the **ggplot2** package to make this figure producing the plot below. What **geom\\_()** function would you use for this plot?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(data=meancounts) +\n  aes(control.mean, treated.mean) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](class12_files/figure-pdf/unnamed-chunk-11-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nFor this plot, I would use the geom_point () function.\n\n#### Q6: Try plotting both axes on a log scale. What is the argument to **plot()** that allows you to do this?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(meancounts[,1], meancounts[,2], log=\"xy\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in xy.coords(x, y, xlabel, ylabel, log): 15032 x values <= 0 omitted\nfrom logarithmic plot\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in xy.coords(x, y, xlabel, ylabel, log): 15281 y values <= 0 omitted\nfrom logarithmic plot\n```\n:::\n\n::: {.cell-output-display}\n![](class12_files/figure-pdf/unnamed-chunk-12-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nThe log argument allows us to plot both axes on a log scale.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeancounts$log2fc <- log2(meancounts[,\"treated.mean\"]/meancounts[,\"control.mean\"])\nhead(meancounts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                control.mean treated.mean      log2fc\nENSG00000000003       900.75       658.00 -0.45303916\nENSG00000000005         0.00         0.00         NaN\nENSG00000000419       520.50       546.00  0.06900279\nENSG00000000457       339.75       316.50 -0.10226805\nENSG00000000460        97.25        78.75 -0.30441833\nENSG00000000938         0.75         0.00        -Inf\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nzero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)\n\nto.rm <- unique(zero.vals[,1])\nmycounts <- meancounts[-to.rm,]\nhead(mycounts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                control.mean treated.mean      log2fc\nENSG00000000003       900.75       658.00 -0.45303916\nENSG00000000419       520.50       546.00  0.06900279\nENSG00000000457       339.75       316.50 -0.10226805\nENSG00000000460        97.25        78.75 -0.30441833\nENSG00000000971      5219.00      6687.50  0.35769358\nENSG00000001036      2327.00      1785.75 -0.38194109\n```\n:::\n:::\n\n\n#### Q7: What is the purpose of the `arr.ind` argument in the **which()** function call above? Why would we then take the first column of the output and need to call the **unique()** function?\n\nThe purpose of the arr.ind argument is to tell us which genes (rows) and samples (columns) have zero counts.\n\nThe purpose of the unique function is to prevent R to count any row twice if it has zer entries in both samples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nup.ind <- mycounts$log2fc > 2\ndown.ind <- mycounts$log2fc < (-2)\n```\n:::\n\n\n#### Q8: Using the `up.ind` vector above can you determine how many up regulated genes we have at the greater than 2 fc level?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(up.ind)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 250\n```\n:::\n:::\n\n\nThere are 250 up regulated genes greater than 2 fc level.\n\n#### Q9: Using the `down.ind` vector above can you determine how many down regulated genes we have at the greater than 2 fc level?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(down.ind)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 367\n```\n:::\n:::\n\n\nThere are 367 down regulated genes greater than 2 fc level.\n\n#### Q10: Do you trust these results? Why or why not?\n\nThese results might not be reliable because we have not determined whether or not the differences are statistically significant (for example, using p-values).\n",
    "supporting": [
      "class12_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}