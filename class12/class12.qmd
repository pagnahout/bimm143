---
title: "Class 12: Transcriptomics and the analysis of RNA-Seq data"
author: Pagna Hout
format: pdf
date: 05/12/2023
---

## 1. Bioconductor and DESeq2 setup

```{r}
library(BiocManager)
library(DESeq2)
```

## 2. Import countData and colData

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")

head(counts)
head(metadata)
```

```{r}
View(counts)
View(metadata)
```

#### Q1: How many genes are in this dataset?

```{r}
nrow(counts)
```

There are 38694 genes in this dataset.

#### Q2: How many 'control' cell lines do we have?

```{r}
table(metadata$dex)
```

There are 4 "control" cell lines in the dataset.

## 3. Toy differential gene expression

```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums( control.counts )/4 
head(control.mean)
```

#### Q3: How would you make the above code in either approach more robust?

```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowMeans(control.counts)
head(control.mean)
```

#### Q4: Follow the same procedure for the `treated` samples (i.e.Â calculate the mean per gene across drug treated samples and assign to a labeled vector called `treated.mean`)

```{r}
treated <- metadata[metadata[,"dex"]=="treated",]
treated.counts <- counts[,treated$id]
treated.mean <- rowMeans(treated.counts)
head(treated.mean)
```

Combining meancount data for bookeeping purposes

```{r}
meancounts <- data.frame(control.mean, treated.mean)

colSums(meancounts)
```

#### Q5 (a): Create a scatter plot showing the mean of the treated samples against the mean of the control samples.

```{r}
plot(meancounts, xlab="Control", ylab="Treated")
```

#### Q5 (b): You could also use the **ggplot2** package to make this figure producing the plot below. What **geom\_()** function would you use for this plot?

```{r}
library(ggplot2)

ggplot(data=meancounts) +
  aes(control.mean, treated.mean) + 
  geom_point()
```

For this plot, I would use the geom_point () function.

#### Q6: Try plotting both axes on a log scale. What is the argument to **plot()** that allows you to do this?

```{r}
plot(meancounts[,1], meancounts[,2], log="xy")
```

The log argument allows us to plot both axes on a log scale.

```{r}
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

#### Q7: What is the purpose of the `arr.ind` argument in the **which()** function call above? Why would we then take the first column of the output and need to call the **unique()** function?

The purpose of the arr.ind argument is to tell us which genes (rows) and samples (columns) have zero counts.

The purpose of the unique function is to prevent R to count any row twice if it has zer entries in both samples.

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

#### Q8: Using the `up.ind` vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

```{r}
sum(up.ind)
```

There are 250 up regulated genes greater than 2 fc level.

#### Q9: Using the `down.ind` vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

```{r}
sum(down.ind)
```

There are 367 down regulated genes greater than 2 fc level.

#### Q10: Do you trust these results? Why or why not?

These results might not be reliable because we have not determined whether or not the differences are statistically significant (for example, using p-values).
