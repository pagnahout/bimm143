{
  "hash": "9b0e130fe06082ac5d4753c83ed2f804",
  "result": {
    "markdown": "---\ntitle: \"Class 7: Machine Learning\"\nauthor: Pagna Hout\ndate: 2023-04-26\nformat: pdf\n---\n\n\n## Example of K-means clustering\n\nFirst step is to make up some data with a known structure, so we know what the answer should be.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp <- c(rnorm (30, mean = -3), rnorm (30, mean = 3))\nx <- cbind(x = tmp, y = rev(tmp))\nplot(x)\n```\n\n::: {.cell-output-display}\n![](class07_files/figure-pdf/unnamed-chunk-1-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nNow we have some structured data in x. Let's see if k-means is able to identify the two groups.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk <- kmeans (x, centers = 2, nstart = 20)\nk\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nK-means clustering with 2 clusters of sizes 30, 30\n\nCluster means:\n          x         y\n1  3.011910 -3.177176\n2 -3.177176  3.011910\n\nClustering vector:\n [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1\n[39] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\nWithin cluster sum of squares by cluster:\n[1] 61.87937 61.87937\n (between_SS / total_SS =  90.3 %)\n\nAvailable components:\n\n[1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\"\n[6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"      \n```\n:::\n:::\n\n\nLet's explore k:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk$centers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          x         y\n1  3.011910 -3.177176\n2 -3.177176  3.011910\n```\n:::\n:::\n\n\nAdding colors to each clusters:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x, col = k$cluster)\n```\n\n::: {.cell-output-display}\n![](class07_files/figure-pdf/unnamed-chunk-4-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nAdding the clusters centers:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x, col = k$cluster)\npoints(k$centers, col = 'blue', pch = 15)\n```\n\n::: {.cell-output-display}\n![](class07_files/figure-pdf/unnamed-chunk-5-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n## Example of Hierarchical Clustering\n\nLet's use the same data as before, which we stored in 'x'. We will use the 'hclust()' function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclustering <- hclust(dist(x))\nclustering\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nhclust(d = dist(x))\n\nCluster method   : complete \nDistance         : euclidean \nNumber of objects: 60 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(clustering)\n```\n\n::: {.cell-output-display}\n![](class07_files/figure-pdf/unnamed-chunk-7-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nLet's add an horizontal line.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(clustering)\nabline(h = 10, col = 'pink')\n```\n\n::: {.cell-output-display}\n![](class07_files/figure-pdf/unnamed-chunk-8-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nTo get our results (i.e., membership vector), we need to cut the tree. The function for doing that is cutree().\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubgroups <- cutree(clustering, h=10)\nsubgroups\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2\n[39] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n```\n:::\n:::\n\n\nPlotting this...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x, col = subgroups)\n```\n\n::: {.cell-output-display}\n![](class07_files/figure-pdf/unnamed-chunk-10-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nYou can also \"cut\" your tree with a number of clusters you want:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncutree(clustering, k = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2\n[39] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n```\n:::\n:::\n\n\n# Principle Component Analysis (PCA)\n\n## PCA of UK Food\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://tinyurl.com/UK-foods\"\nx <- read.csv(url, row.names = 1)\nhead(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               England Wales Scotland N.Ireland\nCheese             105   103      103        66\nCarcass_meat       245   227      242       267\nOther_meat         685   803      750       586\nFish               147   160      122        93\nFats_and_oils      193   235      184       209\nSugars             156   175      147       139\n```\n:::\n:::\n\n\nNow we can generate some basic visualizations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(as.matrix(x), col = rainbow(nrow(x)))\n```\n\n::: {.cell-output-display}\n![](class07_files/figure-pdf/unnamed-chunk-13-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nRefining our barplot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(as.matrix(x), col = rainbow(nrow(x)), beside=T)\n```\n\n::: {.cell-output-display}\n![](class07_files/figure-pdf/unnamed-chunk-14-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nOther visualizations that can be useful...\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(x, col = rainbow(nrow(x)), pch = 16 )\n```\n\n::: {.cell-output-display}\n![](class07_files/figure-pdf/unnamed-chunk-15-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nApplying PCA... using the command \"prcomp()\". This function expects the transpose of our data (flipping rows and columns).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#transpose_matrix <- t(x)\n#pca <- prcomp(transpose_matrix)\n\n#combining the two lines to make the code shorter\npca <- prcomp(t(x))\nsummary(pca)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nImportance of components:\n                            PC1      PC2      PC3       PC4\nStandard deviation     324.1502 212.7478 73.87622 5.552e-14\nProportion of Variance   0.6744   0.2905  0.03503 0.000e+00\nCumulative Proportion    0.6744   0.9650  1.00000 1.000e+00\n```\n:::\n:::\n\n\nLet's plot the PCA results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(pca)\n```\n\n::: {.cell-output-display}\n![](class07_files/figure-pdf/unnamed-chunk-17-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nWe need to access the results of the PCA analysis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(pca)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$names\n[1] \"sdev\"     \"rotation\" \"center\"   \"scale\"    \"x\"       \n\n$class\n[1] \"prcomp\"\n```\n:::\n:::\n\n\nWe can explore the pca\\$x dataframe\n\n\n::: {.cell}\n\n```{.r .cell-code}\npca$x\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 PC1         PC2         PC3           PC4\nEngland   -144.99315    2.532999 -105.768945  1.042460e-14\nWales     -240.52915  224.646925   56.475555  9.556806e-13\nScotland   -91.86934 -286.081786   44.415495 -1.257152e-12\nN.Ireland  477.39164   58.901862    4.877895  2.872787e-13\n```\n:::\n:::\n\n\nPlotting:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot( x = pca$x[,1], y = pca$x[,2] )\n```\n\n::: {.cell-output-display}\n![](class07_files/figure-pdf/unnamed-chunk-20-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nAdding colors and labels...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot( x = pca$x[,1], y = pca$x[,2] )\ncolors_countries <- c('orange', 'pink', 'blue', 'green')\ntext( x = pca$x[,1], y = pca$x[,2], colnames(x), col = colors_countries )\n```\n\n::: {.cell-output-display}\n![](class07_files/figure-pdf/unnamed-chunk-21-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## Lets focus on PC1 as it accounts for > 90% of variance \npar(mar=c(10, 3, 0.35, 0))\nbarplot( pca$rotation[,1], las=2 )\n```\n\n::: {.cell-output-display}\n![](class07_files/figure-pdf/unnamed-chunk-22-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar=c(10, 3, 0.35, 0))\nbarplot( pca$rotation[,2], las=2 )\n```\n\n::: {.cell-output-display}\n![](class07_files/figure-pdf/unnamed-chunk-23-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n# PCA of RNA-seq data\n\nLoading the data...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl2 <- \"https://tinyurl.com/expression-CSV\"\nrna.data <- read.csv(url2, row.names=1)\n```\n:::\n\n\n**Q10**: How many genes and samples are in this data set?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(rna.data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100  10\n```\n:::\n:::\n\n\nAnswer: There are 100 genes and 10 samples.\n\nApplying PCA...\n\n\n::: {.cell}\n\n```{.r .cell-code}\npca_rna = prcomp(t(rna.data))\nsummary(pca_rna)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nImportance of components:\n                             PC1     PC2      PC3      PC4      PC5      PC6\nStandard deviation     2214.2633 88.9209 84.33908 77.74094 69.66341 67.78516\nProportion of Variance    0.9917  0.0016  0.00144  0.00122  0.00098  0.00093\nCumulative Proportion     0.9917  0.9933  0.99471  0.99593  0.99691  0.99784\n                            PC7      PC8      PC9      PC10\nStandard deviation     65.29428 59.90981 53.20803 2.715e-13\nProportion of Variance  0.00086  0.00073  0.00057 0.000e+00\nCumulative Proportion   0.99870  0.99943  1.00000 1.000e+00\n```\n:::\n:::\n\n\nPlotting principle components 1 and 2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(pca_rna$x[,1], pca_rna$x[,2], xlab='PC1', ylab='PC2')\n```\n\n::: {.cell-output-display}\n![](class07_files/figure-pdf/unnamed-chunk-27-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#colnames(rna.data)\ncols_samples <- c(rep('blue', 5), rep('red', 5))\ncols_samples\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"blue\" \"blue\" \"blue\" \"blue\" \"blue\" \"red\"  \"red\"  \"red\"  \"red\"  \"red\" \n```\n:::\n\n```{.r .cell-code}\n#using cols_samples to plot\nplot(pca_rna$x[,1], pca_rna$x[,2], xlab='PC1', ylab='PC2', col = cols_samples )\n```\n\n::: {.cell-output-display}\n![](class07_files/figure-pdf/unnamed-chunk-28-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot( pca_rna$rotation[,1])\n```\n\n::: {.cell-output-display}\n![](class07_files/figure-pdf/unnamed-chunk-29-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsort (pca_rna$rotation[,1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      gene50       gene18        gene3       gene57       gene75       gene79 \n-0.188796985 -0.185668500 -0.183374164 -0.160771014 -0.153164404 -0.146803635 \n      gene56       gene61       gene27       gene17       gene44       gene13 \n-0.132330117 -0.124572881 -0.123615228 -0.122536548 -0.117808971 -0.113357525 \n      gene59       gene54       gene53       gene25        gene1       gene39 \n-0.103935563 -0.102503320 -0.093979884 -0.083761992 -0.081247810 -0.077306742 \n      gene82       gene29       gene58       gene51       gene49       gene86 \n-0.076658760 -0.075605635 -0.075274651 -0.069855142 -0.069530208 -0.069165267 \n      gene91       gene32       gene19       gene94       gene87       gene11 \n-0.065288752 -0.064721235 -0.062411218 -0.061938300 -0.059547317 -0.055698801 \n      gene81       gene40       gene31       gene46       gene70       gene77 \n-0.043780416 -0.037323670 -0.037219970 -0.031990529 -0.030784982 -0.029225446 \n      gene78       gene24       gene12       gene26       gene96       gene80 \n-0.025639741 -0.025407507 -0.024870802 -0.022868107 -0.022293151 -0.021824860 \n      gene43       gene42       gene65       gene64        gene9       gene84 \n-0.020617052 -0.014550791 -0.014052839 -0.012639567 -0.007495075 -0.001289937 \n      gene83       gene69        gene4        gene5       gene97       gene37 \n 0.008504287  0.008871890  0.014242602  0.014303808  0.014994546  0.021280555 \n      gene88        gene8       gene89        gene6       gene92       gene35 \n 0.024015925  0.024026657  0.027652967  0.028634131  0.029394259  0.031349942 \n      gene95       gene71       gene52       gene67       gene74       gene73 \n 0.035342407  0.035589259  0.035802086  0.037840851  0.044286948  0.044581700 \n      gene93       gene15       gene36       gene14       gene22        gene2 \n 0.044940861  0.049090676  0.051765605  0.052004194  0.053013523  0.053465569 \n      gene63        gene7       gene38       gene47       gene33       gene20 \n 0.060529157  0.063389255  0.066665407  0.067141911  0.068437703  0.071571203 \n      gene72       gene16       gene30       gene76       gene55       gene34 \n 0.078551648  0.081254592  0.089150461  0.104435777  0.114988217  0.119604059 \n      gene85       gene68       gene28       gene99      gene100       gene41 \n 0.134907896  0.144227333  0.150812015  0.151678253  0.152877246  0.153077075 \n      gene23       gene66       gene90       gene60       gene62       gene48 \n 0.165155192  0.171311307  0.173156806  0.183139926  0.184203008  0.190495289 \n      gene21       gene10       gene45       gene98 \n 0.194884023  0.197905454  0.225149201  0.230633225 \n```\n:::\n:::\n\n\n### Questions\n\n**Q1**. How many rows and columns are in your new data frame named `x`? What R functions could you use to answer this questions?\n\nThere are 17 rows and 4 columns in the new data frame named x.\n\nR function used: dim(x)\n\n**Q2.** Which approach to solving the \\'row-names problem\\' mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?\n\nI prefer the row.names =1 better because it gives a straightforward direction as to putting column #1 as the name of the row. I think this approach is better than the other one because if we replace x to another value than the x from before would be replaced.\n\n**Q3**: Changing what optional argument in the above **barplot()** function results in the following plot?\n\nAdding beside=T in the barplot() function.\n\n**Q5**: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?\n\nThe code displays a matrix of scatterplots. The diagonal shows the names of the variables of the data. The points in the scatterplot represents the differences or similarities between the two compared variables. If a given point lies on the diagonal, it means that the two variables are correlated.\n\n**Q6**. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?\n\nBased on the data set, people in Northern Ireland eat more fresh potatoes than other countries of the UK, and there is a lower amount of people who consume alcoholic drinks.\n\n**Q7**. Complete the code below to generate a plot of PC1 vs PC2. The second line adds text labels over the data points.\n\n```         \n# Plot PC1 vs PC2\nplot(pca$x[,1], pca$x[,2], xlab=\"PC1\", ylab=\"PC2\", xlim=c(-270,500))\ntext(pca$x[,1], pca$x[,2], colnames(x))\n```\n\n**Q8.** Customize your plot so that the colors of the country names match the colors in our UK and Ireland map and table at start of this document.\n\nplot( x = pca\\$x\\[,1\\], y = pca\\$x\\[,2\\] )\n\ncolors_countries \\<- c('orange', 'pink', 'blue', 'green')\n\ntext( x = pca\\$x\\[,1\\], y = pca\\$x\\[,2\\], colnames(x), col = colors_countries )\n\n**Q9**: Generate a similar \\'loadings plot\\' for PC2. What two food groups feature prominantely and what does PC2 maninly tell us about?\n\nPC2 mainly tell us about the second most variation in the data. The two food groups are fresh potatoes and soft drinks.\n\n**Q10**: How many genes and samples are in this data set?\n\nThere are 100 genes and 10 samples in this data set.\n",
    "supporting": [
      "class07_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}