---
title: "Class 06: R functions"
author: Pagna Hout
date: 2023-04-21
format: pdf
editor_options: 
  chunk_output_type: inline
---

In this class, we will develop our own R function to calculate average grades in a fictional class.

We will start with a simplified version of the problem, just calculating the average grade of one student.

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)

```

We are going to start by calculating the average score of the homework.

```{r}
mean(student1)
```

To get the minimum score, we can use which.min.

```{r}
student1
which.min(student1)
```

I can do the average of the first 7 homework scores.

```{r}
mean(student1[1:7])
```

Another way to select the first 7 homework scores:

```{r}
student1[1:7]
student1[-8]
```

Another way to drop the lowest score (and storing a vector in another variable to use later):

```{r}
student1_drop_lowest = student1[-which.min(student1)]
student1_drop_lowest
```

To get the mean with the lowest score dropped:

```{r}
mean(student1_drop_lowest)
```

We have our first working snippet of code!

Let's try to generalize it to student 2

```{r}
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student2_drop_lowest = student2[-which.min(student2)]
student2_drop_lowest
```

There is a way to calculate the mean dropping missing values (or NA).

```{r}
mean(student2, na.rm = TRUE)
```

This looks good for student2. However, for student3...

```{r}
mean(student3, na.rm=TRUE)
```

We want to know the position of the NAs. So, for student2, we can use the following:

```{r}
which(is.na(student2))
```

For student3:

```{r}
which(is.na(student3))
```

For considering missing values, we can mask the NA with zeros.

Student2:

```{r}
student2[is.na(student2)] <- 0
student2
```

If I use the same code for student3:

```{r}
student3[is.na(student3)] <- 0
student3
```

This is going to be our final working snippet of code for all students (with and without NA values)

```{r}
student3[is.na(student3)] <- 0
student3_drop_lowest = student3[-which.min(student3)]
mean(student3_drop_lowest)
```

Let's build a function:

```{r}
function(x){
  x[is.na(x)] <- 0
  x_drop_lowest = x[-which.min(x)]
  mean(x_drop_lowest)
}
```

### Q1. Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: \"https://tinyurl.com/gradeinput\" 

#### Answer:

```{r}
#' Calculate the average score for a vector of 
#' homework scores, dropping the lowest score, 
#' and considering NA values as zeros.
#'
#' @param x A numeric vector of scores
#'
#' @return The average value of homework scores
#' @export
#'
#' @examples
#' 
#' student <- c('100', '50', NA)
#' grade(student)
#' 
grade <- function(x){
  # Mask NA values with 0
  x[is.na(x)] <- 0
  # Dropping lowest score
  x_drop_lowest = x[-which.min(x)]
  mean(x_drop_lowest)
}
```

Let's apply the function to the students' grades

```{r}
grade(student1)
grade(student2)
grade(student3)
```

Let's apply our function to a gradebook from this URL: "https://tinyurl.com/gradeinput"

```{r}
URL <- "https://tinyurl.com/gradeinput"
gradebook <- read.csv(URL, row.names=1)
```

Let's apply my function grade to the gradebook using apply and running it by rows using MARGIN=1

```{r}
apply(gradebook, MARGIN=1, grade)
```

### Q2. Using your grade() function and the supplied gradebook, who is the top scoring student overall in the gradebook?

```{r}
max(apply(gradebook, 1, grade))
```

The maximum score is 94.5.

```{r}
which.max(apply(gradebook, 1, grade))
```

#### Answer: The student getting the maximum overall score was student 18.

### Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall?)

```{r}
#masking NA values with 0
gradebook [is.na(gradebook)] <- 0
```

Now we apply the mean function to the gradebook

```{r}
apply(gradebook, 2, mean)
```

#### Answer: The toughest homework will be homework 2 considering the mean and considering missing homework as 0.

Maybe having zeros for missing homework is too strict and is not a good representation of the homework difficulty.

One thing we can do is to remove the missing values.

```{r}
gradebook <- read.csv(URL, row.names=1)
apply(gradebook, 2, mean, na.rm = TRUE)
```

Instead of assignment zeros to missing values, if we directly don't consider missing values, the toughest homework will be homework 3 (according to the mean).

If we use the median instead of the mean as a measure of overall score...

```{r}
apply(gradebook, 2, median, na.rm = TRUE)
```

Using some plots...

```{r}
boxplot(gradebook)
```

### Q4. From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)?

```{r}
overall_grades = apply (gradebook, 1, grade)
overall_grades
```

```{r}
cor(gradebook$hw1, overall_grades)
```

```{r}
gradebook [is.na(gradebook)] <- 0
apply(gradebook, 2, cor, y = overall_grades)
```

The maximum value is ...

```{r}
which.max (apply(gradebook, 2, cor, y = overall_grades))
```

#### Answer: Homework 5 was the most predictive of overall score.
